Objetivo: Activar y probar el ecosistema completo de rastreadores de fitness en Fitness AI, asegurando que cada integraci√≥n est√© funcionando correctamente, autenticada, sincronizada, y con UI funcional.

üß† CONTEXTO ACTUAL:
- Google Cloud API Key, Gemini 1.5 Flash y archivo JSON global est√°n activos
- Rutas actualizadas usando apiRouter
- Servicios creados en: server/services/fitness-trackers/
- Componentes y p√°ginas frontend creadas: FitnessTrackers.tsx + fitness-trackers.tsx
- Navegaci√≥n habilitada en Header
- Back y Front conectados
- Men√∫ actualizado y visible
- Componentes funcionan sin errores

üîÑ INSTRUCCIONES DE ACTIVACI√ìN PARA CADA RASTREADOR:

1. **GOOGLE FIT**
   - Verifica que la API est√° habilitada en Google Cloud Console
   - Aseg√∫rate de que `GOOGLE_CLIENT_ID` y `GOOGLE_CLIENT_SECRET` est√©n en `.env`
   - Revisa scopes: `https://www.googleapis.com/auth/fitness.activity.read`
   - Endpoint esperado: `/api/fitness/google-fit/sync`
   - Verifica autenticaci√≥n OAuth2 ‚Üí muestra "Conectar con Google Fit" en UI
   - Ejecuta `syncGoogleFitData()` en el backend y muestra m√©tricas en dashboard

2. **APPLE HEALTH (v√≠a dispositivo iOS o Apple Watch)**
   - Simula integraci√≥n con datos mock si est√°s fuera de iOS
   - Permite subir JSON o CSV exportados desde Apple Health
   - Endpoint esperado: `/api/fitness/apple-health/upload`
   - Ejecuta `parseAppleHealthData()` y muestra gr√°ficos

3. **FITBIT**
   - Aseg√∫rate de tener los secrets: `FITBIT_CLIENT_ID`, `FITBIT_CLIENT_SECRET`, `CALLBACK_URL`
   - OAuth2 flow funcional ‚Üí scopes: `activity`, `profile`, `sleep`, `weight`
   - Endpoint esperado: `/api/fitness/fitbit/auth`
   - UI: Bot√≥n "Connect to Fitbit" en FitnessTrackers.tsx
   - Muestra informaci√≥n diaria al conectar

4. **STRAVA**
   - Usa client ID y secret de Strava Developer Dashboard
   - Verifica que `STRAVA_CLIENT_ID`, `STRAVA_CLIENT_SECRET`, `STRAVA_CALLBACK_URL` est√©n en `.env`
   - OAuth2 scopes: `read`, `activity:read_all`
   - Endpoint esperado: `/api/fitness/strava/auth`
   - Mostrar √∫ltimos entrenamientos en la UI (calor√≠as, distancia, tiempo)

üì¶ FRONTEND FLOW:
- Mostrar en FitnessTrackers.tsx una tarjeta por cada servicio con:
  - Bot√≥n de conexi√≥n
  - Estado de sincronizaci√≥n ‚úÖ
  - √öltimos datos sincronizados
- Permitir reconectar, ver historial y forzar sync manual

üîê SEGURIDAD:
- Usa AuthMiddleware para asegurar que solo usuarios autenticados acceden a `/fitness-trackers`
- Encripta tokens en Firebase o Firestore con TTL (tiempo de vida)
- Verifica que las credenciales no se expongan en consola o UI

üß™ VERIFICACI√ìN:
- Ejecuta pruebas para cada uno:
  - ‚úÖ Autenticaci√≥n OAuth
  - ‚úÖ Fetch de datos
  - ‚úÖ Respuesta JSON esperada
  - ‚úÖ Renderizaci√≥n en UI
  - ‚úÖ Estado sincronizado en tiempo real
- Simula escenarios de error (token expirado, API down) y muestra fallback amigable

üìà DASHBOARD FINAL:
- Integra m√©tricas agregadas por d√≠a y semana
- Muestra comparaci√≥n entre plataformas
- Detecta patrones de salud para sugerencias por IA (Gemini)

üß¨ COMANDO DE ACTIVACI√ìN MAESTRO (simulado):
```ts
await activateFitnessIntegrations({
  services: ["google-fit", "apple-health", "fitbit", "strava"],
  secretsValidated: true,
  syncNow: true,
  logResults: true,
  userId: "Alex",
});
