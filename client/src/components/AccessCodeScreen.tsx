import React, { useState, useEffect } from 'react';
import QRCodeDisplay from './QRCodeDisplay';
import { isValidCode, generateUniqueCode } from '../lib/userCodeGenerator';
import { UserCategory } from '../shared/types';
import userService from '../lib/userService';

interface AccessCodeScreenProps {
  onSuccess: (code: string) => void;
  onRegister: () => void;
}

const AccessCodeScreen: React.FC<AccessCodeScreenProps> = ({ onSuccess, onRegister }) => {
  const [code, setCode] = useState('');
  const [error, setError] = useState('');
  const [isValidating, setIsValidating] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);
  const [validatedCode, setValidatedCode] = useState('');
  const [autoGenCode, setAutoGenCode] = useState('');
  const [userCategory, setUserCategory] = useState<UserCategory>('BEG');
  const [isAutoGenerated, setIsAutoGenerated] = useState(false);
  
  // Auto-generate a code on component mount
  useEffect(() => {
    // Generate a random category
    const categories: UserCategory[] = ['BEG', 'INT', 'ADV', 'PRO', 'VIP'];
    const randomCategory = categories[Math.floor(Math.random() * 3)]; // Limitamos a las primeras 3 categor√≠as en general
    setUserCategory(randomCategory);
    
    // Generate the code
    const generatedCode = generateUniqueCode(randomCategory);
    setAutoGenCode(generatedCode);
    
    // Set this code for display
    setCode(generatedCode);
    setIsAutoGenerated(true);
  }, []);
  
  // Handle code input change
  const handleCodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newCode = e.target.value.toUpperCase();
    setCode(newCode);
    setError('');
    setIsAutoGenerated(false);
  };
  
  // Validate the entered code
  const validateCode = async () => {
    setIsValidating(true);
    setError('');
    
    // Simple validation for demo
    if (!code) {
      setError('Please enter an access code');
      setIsValidating(false);
      return;
    }
    
    // Check if code matches the expected format
    if (!isValidCode(code)) {
      setError('Invalid code format. Expected format: FIT-XXX-0000');
      setIsValidating(false);
      return;
    }
    
    // Simulate API call to validate code
    try {
      // In a real app, this would be an API call to validate the code
      await new Promise(resolve => setTimeout(resolve, 800));
      
      if (isAutoGenerated) {
        // Create a mock user profile with the generated code
        const mockProfile = {
          id: '1',
          name: 'Demo User',
          email: 'demo@example.com',
          uniqueCode: code,
          category: userCategory,
          onboardingCompleted: true,
          fitnessGoals: ['Lose weight', 'Build strength'],
          preferredActivities: ['Running', 'Weight training'],
          dateCreated: new Date().toISOString(),
          lastLogin: new Date().toISOString(),
        };
        
        // Save user profile to localStorage
        userService.saveUserProfile(mockProfile);
        
        // Create and save a lead
        const lead = userService.createLead({
          name: 'Demo User',
          email: 'demo@example.com',
          category: userCategory,
          uniqueCode: code,
          source: 'Auto-generated'
        });
        
        userService.saveLead(lead);
      }
      
      setValidatedCode(code);
      setShowSuccess(true);
      setIsValidating(false);
      
      // Call the onSuccess callback with the validated code
      // This will happen after showing the success animation
      setTimeout(() => {
        onSuccess(code);
      }, 2000);
    } catch (err) {
      setError('Error validating code. Please try again.');
      setIsValidating(false);
    }
  };
  
  // Get feedback text color class based on code validity
  const getCodeValidityClass = () => {
    if (!code) return 'text-gray-500';
    if (isValidCode(code)) return 'text-green-600';
    return 'text-red-600';
  };
  
  // Get the category name from code
  const getCategoryFromCode = (code: string): string => {
    const parts = code.split('-');
    if (parts.length !== 3) return '';
    
    const categoryCode = parts[1];
    
    switch (categoryCode) {
      case 'BEG':
        return 'Beginner';
      case 'INT':
        return 'Intermediate';
      case 'ADV':
        return 'Advanced';
      case 'PRO':
        return 'Professional';
      case 'VIP':
        return 'VIP';
      default:
        return 'Unknown';
    }
  };
  
  // If showing success screen
  if (showSuccess) {
    return (
      <div className="w-full max-w-md mx-auto bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
        <div className="p-8 text-center">
          <div className="flex justify-center mb-6 animate-bounce">
            <div className="bg-green-100 dark:bg-green-900 rounded-full p-2">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-10 w-10 text-green-600 dark:text-green-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
            </div>
          </div>
          
          <h2 className="text-2xl font-bold mb-2 text-gray-900 dark:text-white">
            Access Code Verified!
          </h2>
          
          <p className="text-gray-600 dark:text-gray-400 mb-6">
            You're being redirected to your personalized dashboard...
          </p>
          
          <div className="flex justify-center mb-6">
            <div className="bg-gray-100 dark:bg-gray-700 rounded-lg p-4">
              <QRCodeDisplay code={validatedCode} size={180} />
            </div>
          </div>
          
          <div className="text-gray-600 dark:text-gray-400">
            <div className="font-medium text-xl mb-1">{validatedCode}</div>
            <div className="text-sm opacity-75">
              Category: {getCategoryFromCode(validatedCode)}
            </div>
          </div>
        </div>
      </div>
    );
  }
  
  // Main access code entry screen - Matched to screenshot style
  return (
    <div className="w-full max-w-md mx-auto rounded-xl shadow-lg overflow-hidden relative">
      {/* Header section with the chat icon */}
      <div className="flex items-center justify-between bg-green-500 p-4 text-white">
        <div className="flex items-center">
          <div className="text-white mr-2">
            <svg viewBox="0 0 24 24" width="24" height="24" stroke="currentColor" strokeWidth="2" fill="none" strokeLinecap="round" strokeLinejoin="round">
              <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
            </svg>
          </div>
          <h1 className="text-xl font-semibold">Fitness AI Assistant</h1>
        </div>
        <button className="text-white hover:text-gray-200">
          <svg viewBox="0 0 24 24" width="24" height="24" stroke="currentColor" strokeWidth="2" fill="none" strokeLinecap="round" strokeLinejoin="round">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
      </div>
      
      {/* Tabs navigation */}
      <div className="flex border-b border-gray-200">
        <button className="flex-1 py-4 px-6 bg-white text-green-600 font-medium border-b-2 border-green-500">
          Chat
        </button>
        <button className="flex-1 py-4 px-6 bg-gray-900 text-gray-300 font-medium">
          Workout
        </button>
        <button className="flex-1 py-4 px-6 bg-gray-900 text-gray-300 font-medium">
          QR Code
        </button>
        <button className="flex-1 py-4 px-6 bg-gray-900 text-gray-300 font-medium">
          AR/VR
        </button>
      </div>
      
      {/* Main content area - blue background */}
      <div className="bg-blue-600 py-10 px-6 text-white text-center">
        <h2 className="text-2xl font-bold mb-3">Welcome to Fitness AI</h2>
        <p className="text-lg mb-6">Enter your access code to continue</p>
        
        {/* Access code input form */}
        <div className="my-8">
          <div className="mb-6">
            <label
              htmlFor="accessCode"
              className="block text-lg font-medium text-white mb-2 text-left"
            >
              Access Code
            </label>
            <input
              type="text"
              id="accessCode"
              value={code}
              onChange={handleCodeChange}
              placeholder="FIT-XXX-0000"
              className="w-full px-4 py-3 border border-blue-400 rounded-lg 
                focus:outline-none focus:ring-2 focus:ring-white bg-white text-gray-800
                placeholder-gray-400 text-lg transition-colors"
              maxLength={12}
            />
            <div className="mt-2 text-sm text-blue-200 text-left">
              {code ? (
                isValidCode(code)
                  ? 'Valid code format'
                  : 'Expected format: FIT-XXX-0000'
              ) : (
                'Enter the code from your trainer or receipt'
              )}
            </div>
          </div>
          
          {error && (
            <div className="mb-4 p-3 bg-red-500/30 text-white rounded-md text-sm text-left">
              {error}
            </div>
          )}
          
          <div className="grid gap-4 grid-cols-1 sm:grid-cols-2 mt-8">
            <button
              type="button"
              onClick={validateCode}
              disabled={isValidating}
              className="flex justify-center items-center px-6 py-3 bg-blue-500 text-white rounded-lg
                hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2
                disabled:opacity-50 disabled:cursor-not-allowed transition-colors font-medium"
            >
              {isValidating ? (
                <>
                  <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Validating...
                </>
              ) : (
                'Validate Code'
              )}
            </button>
            
            <button
              type="button"
              onClick={onRegister}
              className="px-6 py-3 border border-white text-white
                rounded-lg hover:bg-white/10 focus:outline-none focus:ring-2
                focus:ring-white focus:ring-offset-2 transition-colors font-medium"
            >
              Need a Code?
            </button>
          </div>
        </div>
        
        <div className="mt-8 text-center text-sm text-blue-200">
          <p>
            If you have any issues with your access code, please contact support at{' '}
            <a
              href="mailto:support@fitness-ai.com"
              className="text-white hover:underline"
            >
              support@fitness-ai.com
            </a>
          </p>
        </div>
      </div>
    </div>
  );
};

export default AccessCodeScreen;